const path = require('path')
const webpack = require('webpack')
const MFS = require('memory-fs')
const clientConfig = require('./webpack.client.config')
const serverConfig = require('./webpack.server.config')

const readFile = (fs, file) => {
    try {
        return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    } catch (e) {}
}

module.exports = function setupDevServer (app, cb) {
    let bundle
    let clientManifest

    const clientCompiler = webpack(clientConfig)
    const devMiddleware = require('./koa2/dev.js')(clientCompiler, {
        publicPath: clientConfig.output.publicPath,
        stats: {
            colors: true
        },
        //noInfo: true
    })
    app.use(devMiddleware)


    clientCompiler.plugin('done', (stats) => {
        stats = stats.toJson()
        stats.errors.forEach(err => console.error(err))
        stats.warnings.forEach(err => console.warn(err))
        const fs = devMiddleware.fileSystem
        const filePath = path.join(clientConfig.output.path, 'front.html')
        if (fs.existsSync(filePath)) {
            clientManifest = fs.readFileSync(filePath, 'utf-8')
            if (bundle) {
                cb(bundle, clientManifest)
            }
        }
    })

    // hot middleware
    app.use(require('./koa2/hot.js')(clientCompiler))

    // watch and update server renderer
    const serverCompiler = webpack(serverConfig)
    const mfs = new MFS()
    serverCompiler.outputFileSystem = mfs
    serverCompiler.watch({}, (err, stats) => {
        if (err) throw err
        stats = stats.toJson()
        stats.errors.forEach(err => console.error(err))
        stats.warnings.forEach(err => console.warn(err))
        console.log("serverPath",serverConfig.output.path)
        // read bundle generated by vue-ssr-webpack-plugin

        bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
        if (clientManifest) {
            console.log('ok2')
            cb(bundle, clientManifest)
        }
    })
}
